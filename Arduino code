#include <Wire.h>

#include <Adafruit_Sensor.h>

#include <Adafruit_BNO055.h>

#include <utility/imumaths.h>



Adafruit_BNO055 bno = Adafruit_BNO055(55);



// Encoder and Motor Pins

#define ENC_IN_LEFT_A 2

#define ENC_IN_RIGHT_A 3

#define ENC_IN_LEFT_B 4

#define ENC_IN_RIGHT_B 11

#define enA 9

#define in1 5

#define in2 6

#define enB 10

#define in3 7

#define in4 8



// Movement constants

boolean Direction_left = true;

boolean Direction_right = true;

const int encoder_minimum = -32768;

const int encoder_maximum = 32767;

volatile int left_wheel_tick_count = 0;

volatile int right_wheel_tick_count = 0;

const int TICKS_PER_METER = 3100;

const int min_pwm = 50;

const int max_pwm = 250;

int base_speed = (min_pwm + max_pwm) / 2;

const int correction_factor = 15;  // Sensibilidad de corrección Kp

float error_integral = 0.0; // Iniciar error integral para control PI

const unsigned long stall_check_interval = 500; // Intervalo para revisar si el robot se ha detenido (en milisegundos)

volatile unsigned long last_tick_time = 0; // Última vez que se detectó un tick



float Ki = 0.8; // Constante Ki para control PI

// Variables para el cálculo de tiempo y ángulo

unsigned long tiempo_anterior = 0;

float last_yaw = 0.0;



// Función para calcular la diferencia mínima entre dos ángulos

float angleDifference(float target, float current) {

  float diff = target - current;

  while (diff < -180.0) diff += 360.0;

  while (diff > 180.0) diff -= 360.0;

  return diff;

}



void setup_imu() {

  if (!bno.begin()) {

    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");

    while (1);

  }

  bno.setExtCrystalUse(true);

}



void setup_encoders() {

  pinMode(ENC_IN_LEFT_A , INPUT_PULLUP);

  pinMode(ENC_IN_LEFT_B , INPUT);

  pinMode(ENC_IN_RIGHT_A , INPUT_PULLUP);

  pinMode(ENC_IN_RIGHT_B , INPUT);



  attachInterrupt(digitalPinToInterrupt(ENC_IN_LEFT_A), left_wheel_tick, RISING);

  attachInterrupt(digitalPinToInterrupt(ENC_IN_RIGHT_A), right_wheel_tick, RISING);

}



void left_wheel_tick() {

  int val = digitalRead(ENC_IN_LEFT_B);

  Direction_left = (val != LOW);

  left_wheel_tick_count += (Direction_left ? 1 : -1);

  last_tick_time = millis(); // Actualizar la última vez que un tick fue detectado

}



void right_wheel_tick() {

  int val = digitalRead(ENC_IN_RIGHT_B);

  Direction_right = (val == LOW);

  right_wheel_tick_count += (Direction_right ? 1 : -1);

  last_tick_time = millis(); // Actualizar la última vez que un tick fue detectado

}



float read_yaw() {

  sensors_event_t event;

  bno.getEvent(&event);

  return event.orientation.x;

}



void maintain_heading(float target_yaw, float& left_speed, float& right_speed, bool forward) {

  float current_yaw = read_yaw();

  float yaw_error = angleDifference(target_yaw, current_yaw);



  unsigned long tiempo_actual = millis();

  unsigned long delta_tiempo = tiempo_actual - tiempo_anterior;

  tiempo_anterior = tiempo_actual;



  error_integral += yaw_error * (delta_tiempo / 1000.0);



  int correction = (int)(correction_factor * yaw_error + error_integral * Ki); // factor Integrador

  if (!forward) {

    correction = -correction; // Invertir la corrección cuando el carro va en reversa

  }



  // Establecer una velocidad base intermedia

  int base_speed = (min_pwm + max_pwm) / 2;



  // Calcular las velocidades de las ruedas aplicando la corrección

  left_speed = base_speed - correction;

  right_speed = base_speed + correction;



  // Asegurarse de que las velocidades estén dentro de los límites

  left_speed = constrain(left_speed, min_pwm, max_pwm);

  right_speed = constrain(right_speed, min_pwm, max_pwm);

  Serial.print(left_speed);

  Serial.print(",");

  Serial.println(right_speed);

}



void turn_right(int angle) {

  float initial_yaw = read_yaw();

  float target_yaw = initial_yaw - angle;

  if (target_yaw < 0) target_yaw += 360.0;



  // Ajustar los pines para girar a la derecha correctamente

  digitalWrite(in1, LOW);

  digitalWrite(in3, LOW);

  digitalWrite(in2, HIGH);

  digitalWrite(in4, HIGH);

  analogWrite(enA, 80);

  analogWrite(enB, 80);



  while (true) {

    float current_yaw = read_yaw();

    float diff = angleDifference(target_yaw, current_yaw);



    if (abs(diff) <= 2.0) { // Tolerancia de 2 grados

      break;

    }

  }



  analogWrite(enA, 0);

  analogWrite(enB, 0);

}



void turn_left(int angle) {

  float initial_yaw = read_yaw();

  float target_yaw = initial_yaw + angle;

  if (target_yaw >= 360.0) target_yaw -= 360.0;



  // Ajustar los pines para girar a la izquierda correctamente

  digitalWrite(in2, LOW);

  digitalWrite(in4, LOW);

  digitalWrite(in1, HIGH);

  digitalWrite(in3, HIGH);

  analogWrite(enA, 80);

  analogWrite(enB, 80);



  while (true) {

    float current_yaw = read_yaw();

    float diff = angleDifference(target_yaw, current_yaw);



    if (abs(diff) <= 2.0) { // Tolerancia de 2 grados

      break;

    }

  }



  analogWrite(enA, 0);

  analogWrite(enB, 0);

}



void check_for_stall_and_correct(float& initial_yaw) {

  if (millis() - last_tick_time > stall_check_interval) {

    // Detener motores

    analogWrite(enA, 0);

    analogWrite(enB, 0);

    // Reversa y giro

    backwards(0.2); // Un poco en reversa

    turn_right(90); // Girar a la derecha

    initial_yaw = read_yaw(); // Actualizar el ángulo inicial

    forward(0.1);  // Avanzar un poco para desatascarse

  }

}



void forward(float distance) {

  int target_ticks = distance * TICKS_PER_METER;

  float initial_yaw = read_yaw();

  left_wheel_tick_count = 0;

  right_wheel_tick_count = 0;

  last_tick_time = millis();

  digitalWrite(in2, LOW);

  digitalWrite(in3, LOW);

  digitalWrite(in1, HIGH);

  digitalWrite(in4, HIGH);



  while (left_wheel_tick_count < target_ticks && right_wheel_tick_count < target_ticks) {

    float left_speed = base_speed, right_speed = base_speed;

    maintain_heading(initial_yaw, left_speed, right_speed, true);

    analogWrite(enA, (int)left_speed);

    analogWrite(enB, (int)right_speed);

    check_for_stall_and_correct(initial_yaw); // Pasar initial_yaw para actualizarlo

  }



  analogWrite(enA, 0);

  analogWrite(enB, 0);

}



void backwards(float distance) {

  int target_ticks = -distance * TICKS_PER_METER;

  float initial_yaw = read_yaw();

  left_wheel_tick_count = 0;

  right_wheel_tick_count = 0;

  last_tick_time = millis();

  digitalWrite(in1, LOW);

  digitalWrite(in4, LOW);

  digitalWrite(in2, HIGH);

  digitalWrite(in3, HIGH);



  while (left_wheel_tick_count > target_ticks && right_wheel_tick_count > target_ticks) {

    float left_speed = max_pwm, right_speed = max_pwm;

    maintain_heading(initial_yaw, left_speed, right_speed, false);

    analogWrite(enA, (int)left_speed);

    analogWrite(enB, (int)right_speed);

    check_for_stall_and_correct(initial_yaw); // Pasar initial_yaw para actualizarlo

  }



  analogWrite(enA, 0);

  analogWrite(enB, 0);

}



void setup(void) {

  Serial.begin(9600);

  setup_imu();

  setup_encoders();

  pinMode(enA, OUTPUT);

  pinMode(enB, OUTPUT);

  pinMode(in1, OUTPUT);

  pinMode(in2, OUTPUT);

  pinMode(in3, OUTPUT);

  pinMode(in4, OUTPUT);

  tiempo_anterior = millis();  // Inicializar tiempo anterior

  //Serial.println("Ingrese 'w' para avanzar, 'a' para girar a la izquierda, 'd' para girar a la derecha:");

}



void loop(void) {

  if (Serial.available() > 0) {

    char input = Serial.read();

    // Limpiar el buffer de entrada

    while (Serial.available() > 0) {

      Serial.read();

    }

    input = tolower(input); // Convertir a minúscula para consistencia



    if (input == 'w') {

      //Serial.println("Avanzando...");

      forward(10);

      //Serial.println("Completado.");

    } else if (input == 'a') {

      //Serial.println("Girando a la izquierda...");

      turn_left(270);

      //Serial.println("Completado.");

    } else if (input == 'd') {

      //Serial.println("Girando a la derecha...");

      turn_right(270);

     // Serial.println("Completado.");

    } else {

     // Serial.println("Entrada no reconocida. Ingrese 'w', 'a' o 'd'.");

    }

   // Serial.println("Ingrese 'w' para avanzar, 'a' para girar a la izquierda, 'd' para girar a la derecha:");

  }

}
